{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Test of komet\n",
        "\n",
        "1. Downloading the dataset (train/val/test) : you can choose different databases \n",
        "2. Calculating of molecule features\n",
        "3. Loading approximated protein features, using SVD of the Local Alignment kernel precalculated on 20605 human proteins\n",
        "4. Testing with a chosen lambda"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "cpu\n"
          ]
        }
      ],
      "source": [
        "%load_ext autoreload\n",
        "%autoreload 2\n",
        "import torch\n",
        "import torch.optim as optim\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import pickle\n",
        "\n",
        "from sklearn.metrics import  average_precision_score,  roc_curve, confusion_matrix, precision_score, recall_score, auc\n",
        "\n",
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
        "device_cpu = torch.device(\"cpu\")\n",
        "device_cpu = device\n",
        "print( device )\n",
        "\n",
        "mytype = torch.float16 # to save memory (only on GPU)\n",
        "mytype = torch.float32"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "cpu\n"
          ]
        }
      ],
      "source": [
        "import sys\n",
        "sys.path.append('../')  # Ajoute le r√©pertoire parent au chemin de recherche des modules\n",
        "import komet "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "'/Users/gguichaoua/Dropbox/gwenn/these/chemogenomique/Komet/ipynb'"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# pour connaitre dans quel repertoire on ets\n",
        "import os\n",
        "\n",
        "os.getcwd()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 1. Downloading the dataset (train/val/test) : you can choose different databases "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [],
      "source": [
        "path_data_set = 'BIOSNAP/full_data'\n",
        "path_data_set = 'BIOSNAP/unseen_protein'\n",
        "path_data_set = 'BIOSNAP/unseen_drug'\n",
        "\n",
        "path_data_set = 'BindingDB'\n",
        "\n",
        "path_data_set = 'LCIdb/Double_Orphans'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "number of smiles to clean: 0\n",
            "train.csv shape (236530, 3)\n",
            "number of smiles to clean: 0\n",
            "val.csv shape (21844, 3)\n",
            "number of smiles to clean: 0\n",
            "test.csv shape (45005, 3)\n",
            "full shape (303379, 3)\n"
          ]
        }
      ],
      "source": [
        "data_dir = '../data/'\n",
        "dataset_dir = data_dir + path_data_set\n",
        "\n",
        "# load data\n",
        "train = Komet.load_df(\"train.csv.zip\",dataset_dir)\n",
        "val = Komet.load_df(\"val.csv\",dataset_dir)\n",
        "test = Komet.load_df(\"test.csv\",dataset_dir)\n",
        "\n",
        "# dataframe full has all smiles and fasta sequences\n",
        "full = pd.concat([train, val, test])\n",
        "print(\"full shape\",full.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 2. Molecule features\n",
        "#!pip install rdkit"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "number of different smiles (mol): 143255\n"
          ]
        }
      ],
      "source": [
        "#### MOLECULE####\n",
        "\n",
        "list_smiles = full[['SMILES']].drop_duplicates().values.flatten()\n",
        "nM = len(list_smiles)\n",
        "print(\"number of different smiles (mol):\",nM)\n",
        "\n",
        "# add indsmiles in train, val, test\n",
        "#dict_ind2smiles = {i:list_smiles[i] for i in range(nM)}\n",
        "dict_smiles2ind = {list_smiles[i]:i for i in range(nM)}\n",
        "train['indsmiles'] = train['SMILES'].apply(lambda x:dict_smiles2ind[x] )\n",
        "val['indsmiles'] = val['SMILES'].apply(lambda x: dict_smiles2ind[x])\n",
        "test['indsmiles'] = test['SMILES'].apply(lambda x: dict_smiles2ind[x])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### a. Nystrom approx Tanimoto kernel"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9rHKuAbKb6xs",
        "outputId": "35d50350-e0d8-4b30-bc7a-e011eb096b42"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "cpu\n",
            "mM 3000 dM 1000\n",
            "mol kernel shape torch.Size([3000, 143255])\n"
          ]
        }
      ],
      "source": [
        "# molecule kernel_first step : compute Morgan FP for each smiles of all the dataset\n",
        "MorganFP = Komet.Morgan_FP(list_smiles)\n",
        "\n",
        "# compute the Nystrom approximation of the mol kernel \n",
        "mM = 3000 #all mol to compute the mol kernel for medium-scale database\n",
        "dM = 1000 #all dim for the mol features for medium-scale database\n",
        "\n",
        "# In case there are less molecules than the number of molecules to compute the Nystrom approximation\n",
        "mM = min(mM,nM) # number of molecule to compute nystrom\n",
        "dM = min(dM,nM) # final dimension of features for molecules\n",
        "print(\"mM\",mM,\"dM\",dM)\n",
        "\n",
        "# compute the Nystrom approximation of the mol kernel and the features of the Kronecker kernel (features nodmalized and calculated on all mol contained in the dataset (train/val/test))\n",
        "X_cn = Komet.Nystrom_X_cn(mM,dM,nM,MorganFP)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### b. Morgan fingerprint (ECFP4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "cpu\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/var/folders/zg/y03kdtc553xg5q1ct59rj44c0000gn/T/ipykernel_83647/1192971215.py:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
            "  X = torch.tensor(X,dtype = mytype,device = device)\n"
          ]
        }
      ],
      "source": [
        "# mol features : Morgan fingerprint (ECFP4)\n",
        "X = Komet.Morgan_FP(smiles)\n",
        "X = torch.tensor(X,dtype = mytype,device = device)\n",
        "X_c = X - X.mean(axis = 0)\n",
        "X_cn = X_c / torch.norm(X_c,dim = 1)[:,None]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### c. Mol2Vec"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/var/folders/zg/y03kdtc553xg5q1ct59rj44c0000gn/T/ipykernel_83647/1019744889.py:53: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
            "  X_cn = torch.tensor(X_cn,dtype = mytype,device = device)\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "143255"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from mol2vec.features import mol2alt_sentence, mol2sentence, MolSentence, DfVec, sentences2vec\n",
        "from gensim.models import word2vec\n",
        "\n",
        "def sentences2vec(sentences, model, unseen=None):\n",
        "    \"\"\"Generate vectors for each sentence (list) in a list of sentences. Vector is simply a\n",
        "    sum of vectors for individual words.\n",
        "    \n",
        "    Parameters\n",
        "    ----------\n",
        "    sentences : list, array\n",
        "        List with sentences\n",
        "    model : word2vec.Word2Vec\n",
        "        Gensim word2vec model\n",
        "    unseen : None, str\n",
        "        Keyword for unseen words. If None, those words are skipped.\n",
        "        https://stats.stackexchange.com/questions/163005/how-to-set-the-dictionary-for-text-analysis-using-neural-networks/163032#163032\n",
        "\n",
        "    Returns\n",
        "    -------\n",
        "    np.array\n",
        "    \"\"\"\n",
        "    \n",
        "    keys = set(model.wv.key_to_index)\n",
        "    vec = []\n",
        "    \n",
        "    if unseen:\n",
        "        unseen_vec = model.wv.get_vector(unseen)\n",
        "\n",
        "    for sentence in sentences:\n",
        "        if unseen:\n",
        "            vec.append(sum([model.wv.get_vector(y) if y in set(sentence) & keys\n",
        "                       else unseen_vec for y in sentence]))\n",
        "        else:\n",
        "            vec.append(sum([model.wv.get_vector(y) for y in sentence \n",
        "                            if y in set(sentence) & keys]))\n",
        "    return np.array(vec)\n",
        "\n",
        "\n",
        "model = word2vec.Word2Vec.load('/Users/gguichaoua/Dropbox/gwenn/these/Cluster/ConPLex_dev/models/model_300dim.pkl')\n",
        "\n",
        "from rdkit import Chem\n",
        "X = []\n",
        "for s in smiles: \n",
        "    m = Chem.MolFromSmiles(s)\n",
        "    sentence = MolSentence(mol2alt_sentence(m,1))  #radius = 1\n",
        "    wide_vector = sentences2vec(sentence,model, unseen=\"UNK\")\n",
        "    feats = wide_vector.mean(axis=0)\n",
        "    feats = torch.from_numpy(feats).squeeze().float()\n",
        "    X.append(feats)\n",
        "X = torch.stack(X)\n",
        "X_c = X - X.mean(axis = 0)\n",
        "X_cn = X_c / torch.norm(X_c,dim = 1)[:,None]\n",
        "X_cn = torch.tensor(X_cn,dtype = mytype,device = device)\n",
        "len(X)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j3S4lGo5n77C"
      },
      "source": [
        "### 3. Protein features"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "cpu\n",
            "number of different Fasta (protein): 2069\n"
          ]
        }
      ],
      "source": [
        "# Index of the protein in the dataset\n",
        "fasta = full[['Target Sequence']].drop_duplicates().values.flatten() # fasta sequence on the dataset, in the same order as the dataset\n",
        "print(\"number of different Fasta (protein):\",len(fasta))\n",
        "# add ind_fasta dans train, val et test\n",
        "train['indfasta'] = train['Target Sequence'].apply(lambda x: np.where(fasta==x)[0][0])\n",
        "val['indfasta'] = val['Target Sequence'].apply(lambda x: np.where(fasta==x)[0][0])\n",
        "test['indfasta'] = test['Target Sequence'].apply(lambda x:  np.where(fasta==x)[0][0])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### a. SVD of LAkernel"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [
        {
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '../data//dict_ind2fasta_all_K_prot.data'",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[18], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m dict_ind2fasta_all \u001b[38;5;241m=\u001b[39m pickle\u001b[38;5;241m.\u001b[39mload(\u001b[38;5;28mopen\u001b[39m(data_dir \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m/dict_ind2fasta_all.data\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrb\u001b[39m\u001b[38;5;124m'\u001b[39m))\n\u001b[1;32m      3\u001b[0m dict_fasta2ind_all \u001b[38;5;241m=\u001b[39m {fasta:ind \u001b[38;5;28;01mfor\u001b[39;00m ind,fasta \u001b[38;5;129;01min\u001b[39;00m dict_ind2fasta_all\u001b[38;5;241m.\u001b[39mitems()}\n\u001b[0;32m----> 4\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mdata_dir\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m/dict_ind2fasta_all_K_prot.data\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mrb\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m f:\n\u001b[1;32m      5\u001b[0m     KP_all \u001b[38;5;241m=\u001b[39m pickle\u001b[38;5;241m.\u001b[39mload(f)\n\u001b[1;32m      6\u001b[0m KP_all\u001b[38;5;241m.\u001b[39mshape, \u001b[38;5;28mtype\u001b[39m(KP_all)\n",
            "File \u001b[0;32m~/opt/anaconda3/envs/conplex-dti/lib/python3.9/site-packages/IPython/core/interactiveshell.py:284\u001b[0m, in \u001b[0;36m_modified_open\u001b[0;34m(file, *args, **kwargs)\u001b[0m\n\u001b[1;32m    277\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m file \u001b[38;5;129;01min\u001b[39;00m {\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m2\u001b[39m}:\n\u001b[1;32m    278\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    279\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIPython won\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mt let you open fd=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfile\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m by default \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    280\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    281\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124myou can use builtins\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m open.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    282\u001b[0m     )\n\u001b[0;32m--> 284\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mio_open\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '../data//dict_ind2fasta_all_K_prot.data'"
          ]
        }
      ],
      "source": [
        "# Load Protein kernel and dictionary of index\n",
        "dict_ind2fasta_all = pickle.load(open(data_dir + \"/dict_ind2fasta_all.data\", 'rb'))\n",
        "dict_fasta2ind_all = {fasta:ind for ind,fasta in dict_ind2fasta_all.items()}\n",
        "with open(data_dir + \"/dict_ind2fasta_all_K_prot.data\", 'rb') as f:\n",
        "    KP_all = pickle.load(f)\n",
        "KP_all.shape, type(KP_all)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "kernel prot shape torch.Size([2069, 2069])\n"
          ]
        }
      ],
      "source": [
        "# Protein kernel for the dataset\n",
        "I_fasta = [dict_fasta2ind_all[fasta[i]] for i in range(len(fasta))] # index of fasta in the precomputed dict and protein kernel, in the same order as the dataset\n",
        "KP = KP_all[I_fasta,:][:,I_fasta]\n",
        "KP = torch.tensor(KP, dtype=mytype).to(device)\n",
        "print(\"kernel prot shape\",KP.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# computation of feature for protein (no nystrom, just SVD)\n",
        "rP = KP.shape[0]#min(KP.shape[0],500)\n",
        "U, Lambda, VT = torch.svd(KP)\n",
        "Y = U[:,:rP] @ torch.diag(torch.sqrt(Lambda[:rP]))\n",
        "\n",
        "# nomramlisation of the features\n",
        "Y_c = Y - Y.mean(axis = 0)\n",
        "Y_cn = Y_c / torch.norm(Y_c,dim = 1)[:,None]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### B. Protbert"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "from ConPLex_dev.src.featurizers.protein import ProtBertFeaturizer\n",
        "target_featurizer = ProtBertFeaturizer(save_dir=\"./save_embed\", per_tok=False).cuda(device)\n",
        "target_featurizer.preload(full['Target Sequence'].unique())\n",
        "Y = [target_featurizer(f) for f in fasta]\n",
        "# nomramlisation of the features\n",
        "Y = torch.stack(Y)\n",
        "Y_c = Y - Y.mean(axis = 0)\n",
        "Y_cn = Y_c / torch.norm(Y_c,dim = 1)[:,None]\n",
        "len(Y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Other from Complex"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "from ConPLex_dev.src.featurizers.protein import ESMFeaturizer,ProtT5XLUniref50Featurizer,ProseFeaturizer\n",
        "target_featurizer = ESMFeaturizer(save_dir=\"./save_embed\", per_tok=False).cuda(device)\n",
        "#target_featurizer = ProtT5XLUniref50Featurizer(save_dir=\"./save_embed\", per_tok=False).cuda(device)\n",
        "#target_featurizer = ProseFeaturizer(save_dir=\"./save_embed\", per_tok=False).cuda(device)\n",
        "target_featurizer.preload(full['Target Sequence'].unique())\n",
        "Y = [target_featurizer(f) for f in fasta]\n",
        "# nomramlisation of the features\n",
        "Y = torch.stack(Y)\n",
        "Y_c = Y - Y.mean(axis = 0)\n",
        "Y_cn = Y_c / torch.norm(Y_c,dim = 1)[:,None]\n",
        "len(Y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q3XpBFstnvcX"
      },
      "source": [
        "### INDEX OF INTERACTIONS"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "len(train) 236530\n"
          ]
        }
      ],
      "source": [
        "# TRAIN\n",
        "I, J, y = Komet.load_datas(train)\n",
        "n = len(I)\n",
        "print(\"len(train)\",n)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DGIdvdGdiFgC"
      },
      "source": [
        "### SVM\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "L-BFGS time: 208.1987 seconds\n"
          ]
        }
      ],
      "source": [
        "lamb = 1e-6\n",
        "\n",
        "# train the model\n",
        "w_bfgs,b_bfgs = Komet.SVM_bfgs(X_cn,Y_cn,y,I,J,lamb)\n",
        "# compute a probability using weights (Platt scaling)\n",
        "s,t = Komet.compute_proba_Platt_Scalling(w,X_cn,Y_cn,y,I,J)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# TEST \n",
        "I_test, J_test, y_test = Komet.load_datas(\"test.csv\")\n",
        "n_test = len(I_test)\n",
        "print(\"len(test)\",n_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#### TEST ####\n",
        "# we test the model on the test set\n",
        "# we compute a probability using weights (Platt scaling)\n",
        "y_pred_test, proba_pred_test = Komet.compute_proba(w_bfgs,b_bfgs,s,t,X_cn,Y_cn,I_test,J_test)\n",
        "# we compute the results\n",
        "acc1,au_Roc,au_PR,acc_best,FP = Komet.results(y_test.cpu(),y_pred_test.cpu(),proba_pred_test.cpu())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### validation (choice of $\\lambda$)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "len(val) 21844\n"
          ]
        }
      ],
      "source": [
        "#VALIDATION \n",
        "I_val, J_val, y_val = Komet.load_datas(val)\n",
        "n_val = len(I_val)\n",
        "print(\"len(val)\",n_val)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "accuracy (threshold 0.5)= 0.5442226529121399\n",
            "roc AUC:0.7673417850891948\n",
            "aupr= 0.8052481767994024\n",
            "optimal threshold: 0.072426796\n",
            "accuracy (best threshold)= 0.712964653968811\n",
            "Confusion Matrix with best threshold: \n",
            " [[8267 2655]\n",
            " [3615 7307]]\n",
            "False Positive Rate with best threshold:  0.24308734663980955\n"
          ]
        }
      ],
      "source": [
        "# we compute a probability using weights (Platt scaling)\n",
        "y_pred, proba_pred = Komet.compute_proba(w,b,s,t,X_cn,Y_cn,I_val,J_val)\n",
        "# we compute the results\n",
        "acc1,au_Roc,au_PR,acc_best,FP = Komet.results(y_val.cpu(),y_pred.cpu(),proba_pred.cpu())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "lambda= 1e-11\n",
            "L-BFGS time: 86.0356 seconds\n",
            "accuracy (threshold 0.5)= 0.8419150710105896\n",
            "roc AUC:0.9083730903647832\n",
            "aupr= 0.6750785577914972\n",
            "optimal threshold: 0.3419631\n",
            "accuracy (best threshold)= 0.8288165926933289\n",
            "Confusion Matrix with best threshold: \n",
            " [[4700 1015]\n",
            " [ 122  805]]\n",
            "False Positive Rate with best threshold:  0.17760279965004375\n",
            "lambda= 1e-10\n",
            "L-BFGS time: 84.5113 seconds\n",
            "accuracy (threshold 0.5)= 0.8289671540260315\n",
            "roc AUC:0.9043180147249664\n",
            "aupr= 0.65638850488429\n",
            "optimal threshold: 0.40460488\n",
            "accuracy (best threshold)= 0.8282144069671631\n",
            "Confusion Matrix with best threshold: \n",
            " [[4710 1005]\n",
            " [ 136  791]]\n",
            "False Positive Rate with best threshold:  0.17585301837270342\n",
            "lambda= 1e-09\n",
            "L-BFGS time: 83.7543 seconds\n",
            "accuracy (threshold 0.5)= 0.8322794437408447\n",
            "roc AUC:0.9055372932752338\n",
            "aupr= 0.6691062563722949\n",
            "optimal threshold: 0.39101088\n",
            "accuracy (best threshold)= 0.8252032399177551\n",
            "Confusion Matrix with best threshold: \n",
            " [[4684 1031]\n",
            " [ 130  797]]\n",
            "False Positive Rate with best threshold:  0.18040244969378827\n",
            "lambda= 1e-08\n",
            "L-BFGS time: 87.3111 seconds\n",
            "accuracy (threshold 0.5)= 0.8367961645126343\n",
            "roc AUC:0.9050319896636436\n",
            "aupr= 0.6538557067669664\n",
            "optimal threshold: 0.27169403\n",
            "accuracy (best threshold)= 0.8095453381538391\n",
            "Confusion Matrix with best threshold: \n",
            " [[4571 1144]\n",
            " [ 121  806]]\n",
            "False Positive Rate with best threshold:  0.20017497812773402\n",
            "lambda= 1e-07\n",
            "L-BFGS time: 87.0610 seconds\n",
            "accuracy (threshold 0.5)= 0.8413128852844238\n",
            "roc AUC:0.898182549187824\n",
            "aupr= 0.5906168814317218\n",
            "optimal threshold: 0.560705\n",
            "accuracy (best threshold)= 0.8477867841720581\n",
            "Confusion Matrix with best threshold: \n",
            " [[4830  885]\n",
            " [ 126  801]]\n",
            "False Positive Rate with best threshold:  0.15485564304461943\n",
            "lambda= 1e-06\n",
            "L-BFGS time: 82.8357 seconds\n",
            "accuracy (threshold 0.5)= 0.8587774634361267\n",
            "roc AUC:0.8908866974152503\n",
            "aupr= 0.5921083491238845\n",
            "optimal threshold: 0.17162679\n",
            "accuracy (best threshold)= 0.8232460021972656\n",
            "Confusion Matrix with best threshold: \n",
            " [[4648 1067]\n",
            " [ 107  820]]\n",
            "False Positive Rate with best threshold:  0.18670166229221347\n",
            "lambda= 1e-05\n",
            "L-BFGS time: 93.1512 seconds\n",
            "accuracy (threshold 0.5)= 0.8632941842079163\n",
            "roc AUC:0.9046732561881761\n",
            "aupr= 0.6470255779108688\n",
            "optimal threshold: 0.2109009\n",
            "accuracy (best threshold)= 0.8416139483451843\n",
            "Confusion Matrix with best threshold: \n",
            " [[4770  945]\n",
            " [ 107  820]]\n",
            "False Positive Rate with best threshold:  0.16535433070866143\n",
            "lambda= 0.0001\n",
            "L-BFGS time: 92.8947 seconds\n",
            "accuracy (threshold 0.5)= 0.8652514219284058\n",
            "roc AUC:0.9128823163555472\n",
            "aupr= 0.6760962771623839\n",
            "optimal threshold: 0.31450766\n",
            "accuracy (best threshold)= 0.8479373455047607\n",
            "Confusion Matrix with best threshold: \n",
            " [[4829  886]\n",
            " [ 124  803]]\n",
            "False Positive Rate with best threshold:  0.15503062117235344\n",
            "lambda= 0.001\n",
            "L-BFGS time: 118.9441 seconds\n",
            "accuracy (threshold 0.5)= 0.8762421011924744\n",
            "roc AUC:0.8714791314516106\n",
            "aupr= 0.5704874609561449\n",
            "optimal threshold: 0.31661108\n",
            "accuracy (best threshold)= 0.7764227390289307\n",
            "Confusion Matrix with best threshold: \n",
            " [[4359 1356]\n",
            " [ 129  798]]\n",
            "False Positive Rate with best threshold:  0.23727034120734908\n",
            "lambda= 0.01\n",
            "L-BFGS time: 26.5274 seconds\n",
            "accuracy (threshold 0.5)= 0.8705209493637085\n",
            "roc AUC:0.8602230546424416\n",
            "aupr= 0.5380128298017853\n",
            "optimal threshold: 0.36445245\n",
            "accuracy (best threshold)= 0.7907257080078125\n",
            "Confusion Matrix with best threshold: \n",
            " [[4477 1238]\n",
            " [ 152  775]]\n",
            "False Positive Rate with best threshold:  0.21662292213473316\n",
            "lambda= 0.1\n",
            "L-BFGS time: 22.6550 seconds\n",
            "accuracy (threshold 0.5)= 0.13956639170646667\n",
            "roc AUC:0.8602231490211513\n",
            "aupr= 0.5380165933689808\n",
            "optimal threshold: 0.36445835\n",
            "accuracy (best threshold)= 0.7907257080078125\n",
            "Confusion Matrix with best threshold: \n",
            " [[4477 1238]\n",
            " [ 152  775]]\n",
            "False Positive Rate with best threshold:  0.21662292213473316\n",
            "lambda= 1.0\n",
            "L-BFGS time: 29.3713 seconds\n",
            "accuracy (threshold 0.5)= 0.13956639170646667\n",
            "roc AUC:0.8602231490211513\n",
            "aupr= 0.5380165933689808\n",
            "optimal threshold: 0.36445826\n",
            "accuracy (best threshold)= 0.7907257080078125\n",
            "Confusion Matrix with best threshold: \n",
            " [[4477 1238]\n",
            " [ 152  775]]\n",
            "False Positive Rate with best threshold:  0.21662292213473316\n",
            "lambda= 10.0\n",
            "L-BFGS time: 36.0537 seconds\n",
            "accuracy (threshold 0.5)= 0.13956639170646667\n",
            "roc AUC:0.8602231490211513\n",
            "aupr= 0.5380165933689807\n",
            "optimal threshold: 0.3644583\n",
            "accuracy (best threshold)= 0.7907257080078125\n",
            "Confusion Matrix with best threshold: \n",
            " [[4477 1238]\n",
            " [ 152  775]]\n",
            "False Positive Rate with best threshold:  0.21662292213473316\n",
            "lambda= 100.0\n",
            "L-BFGS time: 39.4565 seconds\n",
            "accuracy (threshold 0.5)= 0.8604335784912109\n",
            "roc AUC:0.8598630942437482\n",
            "aupr= 0.5349158498741108\n",
            "optimal threshold: 0.5000001\n",
            "accuracy (best threshold)= 0.7917795777320862\n",
            "Confusion Matrix with best threshold: \n",
            " [[4488 1227]\n",
            " [ 156  771]]\n",
            "False Positive Rate with best threshold:  0.2146981627296588\n",
            "lambda_max 0.0001\n",
            "aupr_max for val 0.6760962771623839\n"
          ]
        }
      ],
      "source": [
        "#### Choice of the hyperparameters ####\n",
        "# we use the validation set to choose the hyperparameters\n",
        "# we use the AUPR as a criterion\n",
        "lambdas = np.logspace(-11, 2, num=14)\n",
        "accs = []\n",
        "aupr = []\n",
        "lambda_max = 0\n",
        "aupr_max = 0\n",
        "\n",
        "for lamb in lambdas:\n",
        "    print(\"lambda=\",lamb)\n",
        "\n",
        "    # train the model\n",
        "    w,b = Komet.SVM_bfgs(X_cn,Y_cn,y,I,J,lamb)\n",
        "    # compute a probability using weights (Platt scaling)\n",
        "    s,t = Komet.compute_proba_Platt_Scalling(w,X_cn,Y_cn,y,I,J)\n",
        "\n",
        "    # we test the model on the validation set\n",
        "    # we compute a probability using weights (Platt scaling)\n",
        "    y_pred, proba_pred = compute_proba(w,b,s,t,X_cn,Y_cn,I_val,J_val)\n",
        "    # we compute the results\n",
        "    acc1,au_Roc,au_PR,acc_best,FP = results(y_val.cpu(),y_pred.cpu(),proba_pred.cpu())\n",
        "    accs.append(acc1)\n",
        "    aupr.append(au_PR)\n",
        "\n",
        "    if au_PR > aupr_max:\n",
        "        lambda_max=lamb\n",
        "        aupr_max = au_PR\n",
        "\n",
        "print(\"lambda_max\",lambda_max)\n",
        "print(\"aupr_max for val\",aupr_max)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Plot accuracy in function of lambda"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(lambdas,accs)\n",
        "plt.xscale('log')\n",
        "plt.title('Accuracy in function of lambda')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.plot(lambdas,aupr)\n",
        "plt.xscale('log')\n",
        "plt.title('AUPR in function of lambda')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WHRGD0YNiJ2I"
      },
      "source": [
        "### test with lambda_max"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "lambda_max 0.001\n",
            "L-BFGS time: 1.7617 seconds\n"
          ]
        }
      ],
      "source": [
        "# Train the model with the best hyperparameter\n",
        "print(\"lambda_max\",lambda_max)\n",
        "w_bfgs,b_bfgs = Komet.SVM_bfgs(X_cn,Y_cn,y,I,J,lambda_max)\n",
        "s,t = Komet.compute_proba_Platt_Scalling(w_bfgs,X_cn,Y_cn,y,I,J)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "len(test) 6011\n"
          ]
        }
      ],
      "source": [
        "# TEST \n",
        "I_test, J_test, y_test = Komet.load_datas(\"test.csv\")\n",
        "n_test = len(I_test)\n",
        "print(\"len(test)\",n_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "accuracy (threshold 0.5)= 0.9530860185623169\n",
            "roc AUC:0.8008677532083972\n",
            "aupr= 0.4512337685744232\n",
            "optimal threshold: 0.67166746\n",
            "accuracy (best threshold)= 0.8702378869056702\n",
            "Confusion Matrix with best threshold: \n",
            " [[5012  696]\n",
            " [  84  219]]\n",
            "False Positive Rate with best threshold:  0.12193412754029433\n"
          ]
        }
      ],
      "source": [
        "#### TEST ####\n",
        "# we test the model on the test set\n",
        "# we compute a probability using weights (Platt scaling)\n",
        "y_pred_test, proba_pred_test = Komet.compute_proba(w_bfgs,b_bfgs,s,t,X_cn,Y_cn,I_test,J_test)\n",
        "# we compute the results\n",
        "acc1,au_Roc,au_PR,acc_best,FP = Komet.results(y_test.cpu(),y_pred_test.cpu(),proba_pred_test.cpu())"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": []
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.16"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
